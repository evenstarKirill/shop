{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/work/2022/fullstack-shop/client/src/components/Admin/Modals/CreateModals/CreateDeviceModal/CreateDeviceModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Button, Dropdown, Form, Modal } from 'react-bootstrap';\nimport { Context } from '../../../../..';\nimport { getTypes, getBrands, createDevice } from '../../../../../http/deviceApi';\nimport ModalWrapper from '../../../ModalWrapper/ModalWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateDeviceModal = _ref => {\n  _s();\n\n  let {\n    show,\n    handleShow\n  } = _ref;\n  const {\n    device\n  } = useContext(Context);\n  const [deviceState, setDeviceState] = useState({\n    name: '',\n    price: 0,\n    file: '',\n    brandId: '',\n    brandName: '',\n    typeId: '',\n    typeName: '' // info: [],\n\n  });\n  useEffect(() => {\n    getTypes().then(data => device.setTypes(data));\n    getBrands().then(data => device.setBrands(data));\n  }, []);\n\n  const addInfo = () => {\n    setDeviceState(prevValue => ({ ...prevValue,\n      info: [...prevValue.info, {\n        title: '',\n        description: '',\n        id: nanoid()\n      }]\n    }));\n  }; // const removeInfo = (id: any) => {\n  //   setDeviceState((prevValue: any) => ({\n  //     ...prevValue,\n  //     info: deviceState.info.filter((i: any) => i.id !== id),\n  //   }));\n  // };\n  // const changeInfo = (key: any, value: any, id: any) => {\n  //   setDeviceState((prevValue: any) => ({\n  //     ...prevValue,\n  //     info: deviceState.info.map((i: any) =>\n  //       i.id === id ? { ...i, [key]: value } : i,\n  //     ),\n  //   }));\n  // };\n\n\n  const selectFile = e => {\n    setDeviceState(prevValue => ({ ...prevValue,\n      file: e.target.files[0]\n    }));\n  };\n\n  const addDevice = () => {\n    const formData = new FormData();\n    formData.append('name', deviceState.name);\n    formData.append('price', `${deviceState.price}`);\n    formData.append('img', deviceState.file);\n    formData.append('brandId', deviceState.brandId);\n    formData.append('typeId', deviceState.typeId); // formData.append('info', JSON.stringify(deviceState.info));\n\n    createDevice(formData).then(() => handleShow());\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalWrapper, {\n    show: show,\n    handleShow: handleShow,\n    name: \"Create Device\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            children: deviceState.typeName || 'Select type'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: device.types.rows && device.types.rows.map(type => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: () => setDeviceState(prevValue => ({ ...prevValue,\n                typeId: type.id,\n                typeName: type.name\n              })),\n              children: type.name\n            }, type.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            children: deviceState.brandName || 'Select brand'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: device.brands.rows && device.brands.rows.map(brand => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: () => setDeviceState(prevValue => ({ ...prevValue,\n                brandId: brand.id,\n                brandName: brand.name\n              })),\n              children: brand.name\n            }, brand.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          onChange: e => setDeviceState(prevValue => ({ ...prevValue,\n            name: e.target.value\n          })),\n          className: \"mt-3\",\n          placeholder: \"Add Name...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          onChange: e => setDeviceState(prevValue => ({ ...prevValue,\n            price: e.target.value\n          })),\n          className: \"mt-3\",\n          placeholder: \"Add Price...\",\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          className: \"mt-3\",\n          type: \"file\",\n          onChange: selectFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: handleShow,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-success\",\n        onClick: addDevice,\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateDeviceModal, \"HUuljVs8x8NcVw+PFIqDDxBKAQw=\");\n\n_c = CreateDeviceModal;\nexport default CreateDeviceModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateDeviceModal\");","map":{"version":3,"names":["React","useContext","useEffect","useState","nanoid","Button","Dropdown","Form","Modal","Context","getTypes","getBrands","createDevice","ModalWrapper","CreateDeviceModal","show","handleShow","device","deviceState","setDeviceState","name","price","file","brandId","brandName","typeId","typeName","then","data","setTypes","setBrands","addInfo","prevValue","info","title","description","id","selectFile","e","target","files","addDevice","formData","FormData","append","types","rows","map","type","brands","brand","value"],"sources":["/Users/apple/Documents/work/2022/fullstack-shop/client/src/components/Admin/Modals/CreateModals/CreateDeviceModal/CreateDeviceModal.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Button, Col, Dropdown, Form, Modal, Row } from 'react-bootstrap';\nimport { Context } from '../../../../..';\nimport {\n  getTypes,\n  getBrands,\n  createDevice,\n} from '../../../../../http/deviceApi';\nimport ModalWrapper from '../../../ModalWrapper/ModalWrapper';\n\ninterface IProps {\n  show: boolean;\n  handleShow: () => void;\n}\n\ninterface IDeviceState {\n  name: string;\n  price: number;\n  file: string | Blob;\n  brandId: string;\n  brandName: string;\n  typeId: string;\n  typeName: string;\n  // info: IDeviceInfo[];\n}\n\ninterface IDeviceInfo {\n  title: string;\n  description: string;\n  id: string;\n}\n\nconst CreateDeviceModal = ({ show, handleShow }: IProps) => {\n  const { device } = useContext(Context);\n\n  const [deviceState, setDeviceState] = useState<IDeviceState>({\n    name: '',\n    price: 0,\n    file: '',\n    brandId: '',\n    brandName: '',\n    typeId: '',\n    typeName: '',\n    // info: [],\n  });\n\n  useEffect(() => {\n    getTypes().then((data) => device.setTypes(data));\n    getBrands().then((data) => device.setBrands(data));\n  }, []);\n\n  const addInfo = () => {\n    setDeviceState((prevValue: any) => ({\n      ...prevValue,\n      info: [...prevValue.info, { title: '', description: '', id: nanoid() }],\n    }));\n  };\n  // const removeInfo = (id: any) => {\n  //   setDeviceState((prevValue: any) => ({\n  //     ...prevValue,\n  //     info: deviceState.info.filter((i: any) => i.id !== id),\n  //   }));\n  // };\n\n  // const changeInfo = (key: any, value: any, id: any) => {\n  //   setDeviceState((prevValue: any) => ({\n  //     ...prevValue,\n  //     info: deviceState.info.map((i: any) =>\n  //       i.id === id ? { ...i, [key]: value } : i,\n  //     ),\n  //   }));\n  // };\n\n  const selectFile = (e: any) => {\n    setDeviceState((prevValue: any) => ({\n      ...prevValue,\n      file: e.target.files[0],\n    }));\n  };\n\n  const addDevice = () => {\n    const formData = new FormData();\n    formData.append('name', deviceState.name);\n    formData.append('price', `${deviceState.price}`);\n    formData.append('img', deviceState.file);\n    formData.append('brandId', deviceState.brandId);\n    formData.append('typeId', deviceState.typeId);\n    // formData.append('info', JSON.stringify(deviceState.info));\n    createDevice(formData).then(() => handleShow());\n  };\n\n  return (\n    <ModalWrapper show={show} handleShow={handleShow} name=\"Create Device\">\n      <Modal.Body>\n        <Form>\n          <Dropdown>\n            <Dropdown.Toggle>\n              {deviceState.typeName || 'Select type'}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {device.types.rows &&\n                device.types.rows.map((type: any) => (\n                  <Dropdown.Item\n                    onClick={() =>\n                      setDeviceState((prevValue: any) => ({\n                        ...prevValue,\n                        typeId: type.id,\n                        typeName: type.name,\n                      }))\n                    }\n                    key={type.id}\n                  >\n                    {type.name}\n                  </Dropdown.Item>\n                ))}\n            </Dropdown.Menu>\n          </Dropdown>\n          <Dropdown className=\"mt-2\">\n            <Dropdown.Toggle>\n              {deviceState.brandName || 'Select brand'}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {device.brands.rows &&\n                device.brands.rows.map((brand: any) => (\n                  <Dropdown.Item\n                    onClick={() =>\n                      setDeviceState((prevValue: any) => ({\n                        ...prevValue,\n                        brandId: brand.id,\n                        brandName: brand.name,\n                      }))\n                    }\n                    key={brand.id}\n                  >\n                    {brand.name}\n                  </Dropdown.Item>\n                ))}\n            </Dropdown.Menu>\n          </Dropdown>\n          <Form.Control\n            onChange={(e) =>\n              setDeviceState((prevValue: any) => ({\n                ...prevValue,\n                name: e.target.value,\n              }))\n            }\n            className=\"mt-3\"\n            placeholder=\"Add Name...\"\n          />\n          <Form.Control\n            onChange={(e) =>\n              setDeviceState((prevValue: any) => ({\n                ...prevValue,\n                price: e.target.value,\n              }))\n            }\n            className=\"mt-3\"\n            placeholder=\"Add Price...\"\n            type=\"number\"\n          />\n          <Form.Control className=\"mt-3\" type=\"file\" onChange={selectFile} />\n          {/* <hr /> */}\n          {/* <Button variant={'outline-dark'} onClick={addInfo}>\n            Add new property\n          </Button> */}\n          {/* {deviceState.info &&\n            deviceState.info.map((i) => (\n              <Row className=\"mt-4\" key={i.id}>\n                <Col md={4}>\n                  <Form.Control\n                    value={i.title}\n                    onChange={(e) => changeInfo('title', e.target.value, i.id)}\n                    placeholder=\"Add property name\"\n                  />\n                </Col>\n                <Col md={4}>\n                  <Form.Control\n                    value={i.description}\n                    onChange={(e) =>\n                      changeInfo('description', e.target.value, i.id)\n                    }\n                    placeholder=\"Add property description\"\n                  />\n                </Col>\n                <Col md={4}>\n                  <Button\n                    onClick={() => removeInfo(i.id)}\n                    variant={'outline-danger'}\n                  >\n                    Delete\n                  </Button>\n                </Col>\n              </Row>\n            ))} */}\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleShow}>\n          Close\n        </Button>\n        <Button variant=\"outline-success\" onClick={addDevice}>\n          Save Changes\n        </Button>\n      </Modal.Footer>\n    </ModalWrapper>\n  );\n};\n\nexport default CreateDeviceModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}